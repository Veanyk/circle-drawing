import React, { useEffect, useState, useCallback } from 'react';
import './WalletModal.css';

const MIN_LEN = 6;
const MAX_LEN = 120;

export default function WalletModal({
  isOpen,
  initialWallet,
  onSave,         // async (wallet) => Promise<void> ‚Äî –≤—ã–∑—ã–≤–∞–µ—Ç /setWallet
  onCancel,       // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ü–æ—Ç–æ–º¬ª
  onRequestClose, // –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ (–∫—Ä–µ—Å—Ç–∏–∫/–æ–≤–µ—Ä–ª–µ–π/escape)
}) {
  const [wallet, setWallet] = useState(initialWallet || '');
  const [error, setError] = useState('');
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    if (isOpen) {
      setWallet(initialWallet || '');
      setError('');
      setSaving(false);
      // –§–æ–∫—É—Å –Ω–∞ –∏–Ω–ø—É—Ç
      setTimeout(() => {
        const el = document.getElementById('wallet-input');
        if (el) el.focus();
      }, 0);
    }
  }, [isOpen, initialWallet]);

  const escHandler = useCallback((e) => {
    if (e.key === 'Escape' && isOpen) onRequestClose?.();
  }, [isOpen, onRequestClose]);

  useEffect(() => {
    window.addEventListener('keydown', escHandler);
    return () => window.removeEventListener('keydown', escHandler);
  }, [escHandler]);

  if (!isOpen) return null;

  const tooShort = wallet.trim().length < MIN_LEN;
  const tooLong  = wallet.trim().length > MAX_LEN;

  const save = async () => {
    setError('');
    const w = wallet.trim();

    if (!w || tooShort || tooLong) {
      setError(`–ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç ${MIN_LEN} –¥–æ ${MAX_LEN} —Å–∏–º–≤–æ–ª–æ–≤.`);
      return;
    }

    try {
      setSaving(true);
      await onSave(w);
    } catch (e) {
      const msg = String(e?.message || e);
      // –ú–∞–ø–ø–∏–º —Ç–∏–ø–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –±—ç–∫–∞
      if (/not_eligible/.test(msg)) {
        setError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ (–Ω—É–∂–Ω–æ 100+).');
      } else if (/invalid_wallet/.test(msg)) {
        setError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.');
      } else if (/telegram_only/.test(msg)) {
        setError('–ü—Ä–∏–≤—è–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ Telegram Mini App.');
      } else {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–∑–∂–µ.');
      }
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="wm-backdrop" onClick={onRequestClose}>
      <div className="wm-modal" onClick={(e) => e.stopPropagation()}>
        <button className="wm-close" onClick={onRequestClose} aria-label="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>

        <h2 className="wm-title">üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! 100+ –º–æ–Ω–µ—Ç –Ω–∞–±—Ä–∞–Ω–æ</h2>
        <p className="wm-subtitle">
          –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –±—É–¥—É—â–∏—Ö –≤—ã–ø–ª–∞—Ç. –ï–≥–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∑–∂–µ.
        </p>

        <label className="wm-label" htmlFor="wallet-input">–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞</label>
        <input
          id="wallet-input"
          className="wm-input"
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 0x... –∏–ª–∏ TON..."
          value={wallet}
          onChange={(e) => setWallet(e.target.value)}
          disabled={saving}
          maxLength={MAX_LEN + 2}
        />

        {error && <div className="wm-error">{error}</div>}

        <div className="wm-actions">
          <button className="wm-btn wm-btn-secondary" onClick={onCancel} disabled={saving}>
            –ü–æ—Ç–æ–º
          </button>
          <button className="wm-btn wm-btn-primary" onClick={save} disabled={saving}>
            {saving ? '–°–æ—Ö—Ä–∞–Ω—è—é‚Ä¶' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
          </button>
        </div>

        <div className="wm-hint">
          –°–æ–≤–µ—Ç—ã: –∫–æ–ø–∏—Ä—É–π –∞–¥—Ä–µ—Å –∏–∑ —Å–≤–æ–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–ø–ª–∞—Ç.
        </div>
      </div>
    </div>
  );
}
